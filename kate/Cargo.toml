[package]
name = "kate"
version = "0.9.2"
authors = ["Denis Ermolin <denis.ermolin@matic.network>"]
edition = "2021"
license = "Apache-2.0"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
# Internal
avail-core = { path = "../core", default-features = false }
kate-recovery = { path = "recovery", default-features = false }

# Crypto
dusk-plonk = { workspace = true, optional = true }
poly-multiproof = { workspace = true, optional = true }

# Parity & Substrate
codec = { package = "parity-scale-codec", version = "3", default-features = false, features = ["derive"] }
sp-arithmetic.workspace = true
sp-core.workspace = true

# 3rd-party
derive_more.workspace = true
static_assertions.workspace = true
thiserror-no-std.workspace = true

dusk-bytes = { workspace = true, optional = true }
hex = { workspace = true, optional = true }
hex-literal.workspace = true
log = { workspace = true, optional = true }
nalgebra = { workspace = true, optional = true }
once_cell = { workspace = true, optional = true }
rand = { workspace = true, optional = true }
rand_chacha = { workspace = true, optional = true }
rayon = { workspace = true, optional = true }
serde = { workspace = true, optional = true }
serde_json = { workspace = true, optional = true }

[dev-dependencies]
criterion.workspace = true
proptest.workspace = true
serde_json.workspace = true
test-case.workspace = true

[features]
default = [ "std" ]
alloc = [ "dusk-plonk/alloc", "nalgebra/alloc" ]
parallel = [ "criterion/rayon", "rayon" ]

std = [
	"avail-core/std",
	"codec/std",
	"dusk-bytes",
	"dusk-plonk/std",
	"hex",
	"kate-recovery/std",
	"log",
	"nalgebra/std",
	"once_cell",
	"parallel",
	"poly-multiproof/blst",
	"rand/std",
	"rand_chacha/std",
	"serde",
	"serde_json",
	"sp-arithmetic/std",
	"sp-core/std",
]

serde = [ "dep:serde" ]

extended-columns = []
maximum-block-size = []

[[bench]]
name = "reconstruct"
harness = false
