// This file is part of Data Availability.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for nomad_home
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-03, STEPS: `20`, REPEAT: 30, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./target/release/data-avail
// benchmark
// --chain=dev
// --steps=20
// --repeat=30
// --log=warn
// --execution=wasm
// --wasm-execution=compiled
// --template=./.maintain/frame-weight-template.hbs
// --pallet=nomad-home
// --extrinsic=*
// --output=./pallets/nomad/home/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for nomad_home.
pub trait WeightInfo {
	fn improper_update() -> Weight;
	fn dispatch(b: u32, ) -> Weight;
	fn update() -> Weight;
}

/// Weights for nomad_home using the Data Avaiability node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: NomadHome Base (r:1 w:1)
	// Storage: NomadHome RootToIndex (r:1 w:0)
	fn improper_update() -> Weight {
		(342_727_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: NomadHome Base (r:1 w:0)
	// Storage: NomadHome Nonces (r:1 w:1)
	// Storage: NomadHome Tree (r:1 w:1)
	// Storage: NomadHome IndexToRoot (r:0 w:1)
	// Storage: NomadHome RootToIndex (r:0 w:1)
	fn dispatch(b: u32, ) -> Weight {
		(80_065_000 as Weight)
			// Standard Error: 0
			.saturating_add((5_000 as Weight).saturating_mul(b as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: NomadHome Base (r:1 w:1)
	// Storage: NomadHome RootToIndex (r:32 w:32)
	// Storage: NomadHome IndexToRoot (r:31 w:32)
	fn update() -> Weight {
		(657_713_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(64 as Weight))
			.saturating_add(T::DbWeight::get().writes(65 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: NomadHome Base (r:1 w:1)
	// Storage: NomadHome RootToIndex (r:1 w:0)
	fn improper_update() -> Weight {
		(342_727_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: NomadHome Base (r:1 w:0)
	// Storage: NomadHome Nonces (r:1 w:1)
	// Storage: NomadHome Tree (r:1 w:1)
	// Storage: NomadHome IndexToRoot (r:0 w:1)
	// Storage: NomadHome RootToIndex (r:0 w:1)
	fn dispatch(b: u32, ) -> Weight {
		(80_065_000 as Weight)
			// Standard Error: 0
			.saturating_add((5_000 as Weight).saturating_mul(b as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: NomadHome Base (r:1 w:1)
	// Storage: NomadHome RootToIndex (r:32 w:32)
	// Storage: NomadHome IndexToRoot (r:31 w:32)
	fn update() -> Weight {
		(657_713_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(64 as Weight))
			.saturating_add(RocksDbWeight::get().writes(65 as Weight))
	}
}
