name: Polygon Avail CI
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install nightly `rust-fmt` 
        uses: actions-rs/toolchain@v1
        with:
            # NOTE: Until https://github.com/actions-rs/toolchain/pull/209 is merged,
            # this should be synced with rust-toolchain.toml file.
            # After merge, this section should be removed.
            toolchain: nightly-2022-11-25
            components: rustfmt
            profile: minimal

      - name: Check code formatting
        uses: actions-rs/cargo@v1
        with:
          toolchain: nightly-2022-11-25
          command: fmt
          args: --check

  build:
    runs-on: ubuntu-latest
    needs: [lint]
    env:
      CARGO_SCCACHE_COMMIT: bed5571c
      RUSTFLAGS: "-C opt-level=3 -D warnings"
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: ${{ runner.tool_cache }}/cargo-sccache-${CARGO_SCCACHE_COMMIT}
          key: ${{ runner.OS }}-sccache-bin-${{ env.CARGO_SCCACHE_COMMIT }}-v1
     
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: '3.x'

      # With rustup's nice new toml format, we just need to run rustup show to install the toolchain
      # https://github.com/actions-rs/toolchain/issues/126#issuecomment-782989659
      - name: Setup Rust toolchain
        run: rustup show

      - name: SCCache
        run: |
          # We altered the path to avoid old actions to overwrite it
          SCCACHE_PATH=${{ runner.tool_cache }}/cargo-sccache-${CARGO_SCCACHE_COMMIT}
          SCCACHE_BIN=${SCCACHE_PATH}/bin/sccache
          if [ ! -f $SCCACHE_BIN ]; then
            cargo install sccache --git https://github.com/purestake/sccache.git --rev $CARGO_SCCACHE_COMMIT --force --no-default-features --features=dist-client --root $SCCACHE_PATH
          fi
          ls -la $SCCACHE_BIN
          ps aux | grep sccache
          if [[ -z `pgrep sccache` ]]; then
            chmod +x $SCCACHE_BIN
            $SCCACHE_BIN --start-server
          fi
          $SCCACHE_BIN -s
          echo "RUSTC_WRAPPER=$SCCACHE_BIN" >> $GITHUB_ENV

      - name: Build node 
        run: |
          env  
          cargo build --workspace -p data-avail 
      - name: Check other features
        run: cargo check --workspace --features "runtime-benchmarks try-runtime" -p data-avail 
      - name: Upload data-avail binary
        uses: actions/upload-artifact@v2
        with:
          name: data-avail 
          path: target/debug/data-avail


  unit_tests:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2
     
      # Restore cache from `build`
      - uses: actions/cache/restore@v3
        with:
          path: ${{ runner.tool_cache }}/cargo-sccache-${CARGO_SCCACHE_COMMIT}
          key: ${{ runner.OS }}-sccache-bin-${{ env.CARGO_SCCACHE_COMMIT }}-v1

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: '3.x'

      # With rustup's nice new toml format, we just need to run rustup show to install the toolchain
      # https://github.com/actions-rs/toolchain/issues/126#issuecomment-782989659
      - name: Setup Rust toolchain
        run: rustup show

      - name: SCCache
        run: |
          # We altered the path to avoid old actions to overwrite it
          SCCACHE_PATH=${{ runner.tool_cache }}/cargo-sccache-${CARGO_SCCACHE_COMMIT}
          SCCACHE_BIN=${SCCACHE_PATH}/bin/sccache
          if [ ! -f $SCCACHE_BIN ]; then
            cargo install sccache --git https://github.com/purestake/sccache.git --rev $CARGO_SCCACHE_COMMIT --force --no-default-features --features=dist-client --root $SCCACHE_PATH
          fi
          ls -la $SCCACHE_BIN
          ps aux | grep sccache
          if [[ -z `pgrep sccache` ]]; then
            chmod +x $SCCACHE_BIN
            $SCCACHE_BIN --start-server
          fi
          $SCCACHE_BIN -s
          echo "RUSTC_WRAPPER=$SCCACHE_BIN" >> $GITHUB_ENV


      - name: Run tests
        run: |
          env
          cargo test --workspace
        env:
          RUSTFLAGS: "-C instrument-coverage"
          LLVM_PROFILE_FILE: "profile-%p-%m.profraw"
          SKIP_WASM_BUILD: true

      - name: Generate test code coverage report
        run: |
          cargo +stable install --force grcov
          grcov . -s . --binary-path ./target/debug/ -t lcov --branch --ignore-not-existing -o lcov.info

      - name: Upload test code coverage report to codecov.io
        uses: codecov/codecov-action@v2
        with:
          files: lcov.info

      - name: Cleanup
        run: find . -name \*.profraw -type f -exec rm -f {} +
  

  e2e_tests:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2

      # Restore cache from `build`
      - uses: actions/cache/restore@v3
        with:
          path: ${{ runner.tool_cache }}/cargo-sccache-${CARGO_SCCACHE_COMMIT}
          key: ${{ runner.OS }}-sccache-bin-${{ env.CARGO_SCCACHE_COMMIT }}-v1

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: '3.x'

      # With rustup's nice new toml format, we just need to run rustup show to install the toolchain
      # https://github.com/actions-rs/toolchain/issues/126#issuecomment-782989659
      - name: Setup Rust toolchain
        run: rustup show

      - name: SCCache
        run: |
          # We altered the path to avoid old actions to overwrite it
          SCCACHE_PATH=${{ runner.tool_cache }}/cargo-sccache-${CARGO_SCCACHE_COMMIT}
          SCCACHE_BIN=${SCCACHE_PATH}/bin/sccache
          if [ ! -f $SCCACHE_BIN ]; then
            cargo install sccache --git https://github.com/purestake/sccache.git --rev $CARGO_SCCACHE_COMMIT --force --no-default-features --features=dist-client --root $SCCACHE_PATH
          fi
          ls -la $SCCACHE_BIN
          ps aux | grep sccache
          if [[ -z `pgrep sccache` ]]; then
            chmod +x $SCCACHE_BIN
            $SCCACHE_BIN --start-server
          fi
          $SCCACHE_BIN -s
          echo "RUSTC_WRAPPER=$SCCACHE_BIN" >> $GITHUB_ENV

      - uses: actions/download-artifact@v2
        with:
          name: data-avail 

      - name: Run E2E SubXt tests
        run: |
          chmod uog+x data-avail
          ./data-avail --dev --tmp &
          cargo run --manifest-path avail-subxt/Cargo.toml --example accounts_from_mnemonics.rs
          cargo run --manifest-path avail-subxt/Cargo.toml --example headers
          cargo run --manifest-path avail-subxt/Cargo.toml --example max_block_submit 
          cargo run --manifest-path avail-subxt/Cargo.toml --example max_block_submit 
          cargo run --manifest-path avail-subxt/Cargo.toml --example submit_data
          cargo run --manifest-path avail-subxt/Cargo.toml --example submit_data_and_dispatch_data_root
