name: Releaser
on:
  push:
    branches-ignore:
      - '**'
    tags:
      - '*'

jobs:
  binary_linux_amd64:
    runs-on: ubuntu-latest
    steps:
         - uses: actions/checkout@v2
         - name: Install Protoc
           uses: arduino/setup-protoc@v1
           with:
             version: '3.x'

         - name: install cargo deps and build avail
           shell: bash
           run: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            source "$HOME/.cargo/env"
            rustup toolchain install nightly
            rustup default nightly
            rustup target add wasm32-unknown-unknown --toolchain nightly

            cargo build --release -p data-avail
            mv target/release/data-avail target/release/data-avail-linux-amd64
            chmod 777 runtime
            docker run --name srtool --rm -e PACKAGE=da-runtime -e RUNTIME_DIR=runtime/ -e PROFILE=release -v $(pwd):/build:rw -v /tmp/cargo:/cargo-home docker.io/paritytech/srtool:1.66.1 build
            mv runtime/target/srtool/release/wbuild/da-runtime/da_runtime.compact.compressed.wasm target/release/wbuild/da-runtime/data-avail-runtime.compact.compressed.wasm
            pushd target/release/
            tar czf data-avail-linux-amd64.tar.gz data-avail-linux-amd64
            popd
         - uses: actions/upload-artifact@v2
           with:
             name: data-avail-linux-amd64-tar
             path: target/release/data-avail-linux-amd64.tar.gz
         - uses: actions/upload-artifact@v2
           with:
             name: avail-runtime-compressed-wasm
             path: target/release/wbuild/da-runtime/data-avail-runtime.compact.compressed.wasm

  binary_linux_aarch64:
    runs-on: ubuntu-latest
    steps:
         - uses: actions/checkout@v2
         - name: Install Protoc
           uses: arduino/setup-protoc@v1
           with:
             version: '3.x'

         - name: install cargo deps and build avail
           shell: bash
           run: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            source "$HOME/.cargo/env"
            rustup toolchain install nightly
            rustup default nightly
            rustup target add wasm32-unknown-unknown --toolchain nightly

            rustup target add aarch64-unknown-linux-gnu
            sudo apt-get update && sudo apt-get install -y musl-tools clang gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev libc6-dev-arm64-cross
            env  BINDGEN_EXTRA_CLANG_ARGS='--sysroot /usr/aarch64-linux-gnu' CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=/usr/bin/aarch64-linux-gnu-gcc cargo build --release --target=aarch64-unknown-linux-gnu -p data-avail
            mv target/aarch64-unknown-linux-gnu/release/data-avail target/aarch64-unknown-linux-gnu/release/data-avail-linux-aarch64
            pushd target/aarch64-unknown-linux-gnu/release/
            tar czf data-avail-linux-aarch64.tar.gz data-avail-linux-aarch64
            popd
         - uses: actions/upload-artifact@v2
           with:
             name: data-avail-linux-aarch64-tar
             path: target/aarch64-unknown-linux-gnu/release/data-avail-linux-aarch64.tar.gz


  # compile all binaries from previous jobs into single release
  binary_publish:
    needs: [binary_linux_amd64, binary_linux_aarch64]
    runs-on: ubuntu-latest
    steps:
         - uses: actions/download-artifact@v2
           with:
             name: data-avail-linux-amd64-tar
         - uses: actions/download-artifact@v2
           with:
             name: data-avail-linux-aarch64-tar
         - uses: actions/download-artifact@v2
           with:
             name: avail-runtime-compressed-wasm
         - name: Prepare
           id: prepare
           run: |
               TAG=${GITHUB_REF#refs/tags/}
               echo ::set-output name=tag_name::${TAG}
         - name: publish binaries
           uses: svenstaro/upload-release-action@v2
           with:
             repo_token: ${{ secrets.GITHUB_TOKEN }}
             file: /home/runner/work/avail/avail/data-avail*
             release_name: ${{ steps.prepare.outputs.tag_name }}
             tag: ${{ steps.prepare.outputs.tag_name }}
             overwrite: true
             file_glob: true

  # build avail image and publish to dockerhub
  docker_linux_amd64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Prepare
        id: prepare
        run: |
            TAG=${GITHUB_REF#refs/tags/}
            echo ::set-output name=tag_name::${TAG}
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push images
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: availj/avail:${{ steps.prepare.outputs.tag_name }}
