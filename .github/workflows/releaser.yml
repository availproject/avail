name: Releaser
on:
  push:
    branches-ignore:
      - '**'
    tags:
      - '*'
  workflow_dispatch:

jobs:
  build_wasm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: '3.x'

      - name: install cargo deps and build avail
        shell: bash
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source "$HOME/.cargo/env" && rustup show && cargo build --locked --release

          chmod 777 runtime
          docker run --name srtool --rm -e PACKAGE=da-runtime -e RUNTIME_DIR=runtime/ -e PROFILE=release -v $(pwd):/build:rw -v /tmp/cargo:/cargo-home docker.io/paritytech/srtool:1.70.0 build
          mv runtime/target/srtool/release/wbuild/da-runtime/da_runtime.compact.compressed.wasm target/release/wbuild/da-runtime/data-avail-runtime.compact.compressed.wasm

      - uses: actions/upload-artifact@v2
        with:
          name: avail-runtime-compressed-wasm
          path: target/release/wbuild/da-runtime/data-avail-runtime.compact.compressed.wasm
  
  binary_linux_amd64:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: '3.x'

      - name: install cargo deps and build avail
        shell: bash
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source "$HOME/.cargo/env" && rustup show && cargo build --locked --release
          pushd target/release
          tar -czf x86_64-ubuntu-2004-data-avail.tar.gz data-avail
          popd

      - uses: actions/upload-artifact@v2
        with:
          name: x86_64-ubuntu-2004-data-avail.tar.gz
          path: target/release/x86_64-ubuntu-2004-data-avail.tar.gz

  binary_linux_aarch64:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: '3.x'

      - name: install cargo deps and build avail
        shell: bash
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source "$HOME/.cargo/env" && rustup show 
          
          rustup target add aarch64-unknown-linux-gnu
          sudo apt-get update && sudo apt-get install -y musl-tools clang gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev libc6-dev-arm64-cross
          env  BINDGEN_EXTRA_CLANG_ARGS='--sysroot /usr/aarch64-linux-gnu' CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=/usr/bin/aarch64-linux-gnu-gcc cargo build --release --target=aarch64-unknown-linux-gnu -p data-avail
          pushd target/aarch64-unknown-linux-gnu/release/
          tar -czf arm64-ubuntu-2004-data-avail.tar.gz data-avail
          popd
      - uses: actions/upload-artifact@v2
        with:
          name: arm64-ubuntu-2004-data-avail.tar.gz
          path: target/aarch64-unknown-linux-gnu/release/arm64-ubuntu-2004-data-avail.tar.gz


  # compile all binaries from previous jobs into single release
  binary_publish:
    needs: [binary_linux_amd64, binary_linux_aarch64, build_wasm]
    runs-on: ubuntu-latest
    steps:
      - name: Create Artifact Directory
        run: mkdir ./artifact

      - uses: actions/download-artifact@v3
        with:
          name: x86_64-ubuntu-2004-data-avail.tar.gz
          path: ./artifact
        
      - uses: actions/download-artifact@v3
        with:
          name: arm64-ubuntu-2004-data-avail.tar.gz
          path: ./artifact
        
      - uses: actions/download-artifact@v3
        with:
          name: avail-runtime-compressed-wasm
          path: ./artifact
        
      - name: Prepare
        id: prepare
        run: |
            TAG=${GITHUB_REF#refs/tags/}
            echo ::set-output name=tag_name::${TAG}

      - name: publish binaries
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./artifact/*
          release_name: ${{ steps.prepare.outputs.tag_name }}
          tag: ${{ steps.prepare.outputs.tag_name }}
          overwrite: true
          file_glob: true

  # build avail image and publish to dockerhub
  docker_linux_amd64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Prepare
        id: prepare
        run: |
            TAG=${GITHUB_REF#refs/tags/}
            echo ::set-output name=tag_name::${TAG}

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push images
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: availj/avail:${{ steps.prepare.outputs.tag_name }}
          build-args: |
            AVAIL_TAG=${{ steps.prepare.outputs.tag_name }}
