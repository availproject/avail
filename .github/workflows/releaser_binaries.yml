name: Releaser Binaries and Wasm
on:
  push:
    branches-ignore:
      - '**'
    tags:
      - '*'
  workflow_dispatch:

jobs:
  build_wasm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: '3.x'

      - name: install cargo deps and build avail
        shell: bash
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source "$HOME/.cargo/env" && rustup show && cargo build --locked --release

          chmod 777 runtime
          docker run --name srtool --rm -e PACKAGE=da-runtime -e RUNTIME_DIR=runtime/ -e PROFILE=release -v $(pwd):/build:rw -v /tmp/cargo:/cargo-home docker.io/paritytech/srtool:1.70.0 build
          mv runtime/target/srtool/release/wbuild/da-runtime/da_runtime.compact.compressed.wasm target/release/wbuild/da-runtime/avail-node-runtime.compact.compressed.wasm

      - uses: actions/upload-artifact@v2
        with:
          name: avail-runtime-compressed-wasm
          path: target/release/wbuild/da-runtime/avail-node-runtime.compact.compressed.wasm
  
  x86_64_linux_ubuntu_2004:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: '3.x'

      - name: install podman
        run: sudo apt-get update && sudo apt install podman -y
        
      - name: build docker image and build avail binary
        run: ENGINE=podman DISTRO=ubuntu-2004 ZIP=1 ./scripts/binaries/build.sh

      - uses: actions/upload-artifact@v2
        with:
          name: x86_64-ubuntu-2004-avail-node.tar.gz
          path: output/zips/x86_64-ubuntu-2004-avail-node.tar.gz

  x86_64_linux_ubuntu_2204:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: '3.x'

      - name: install podman
        run: sudo apt-get update && sudo apt install podman -y
        
      - name: build docker image and build avail binary
        run: ENGINE=podman DISTRO=ubuntu-2204 ZIP=1 ./scripts/binaries/build.sh

      - uses: actions/upload-artifact@v2
        with:
          name: x86_64-ubuntu-2204-avail-node.tar.gz
          path: output/zips/x86_64-ubuntu-2204-avail-node.tar.gz

  x86_64_linux_ubuntu_2310:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: '3.x'

      - name: install podman
        run: sudo apt-get update && sudo apt install podman -y
        
      - name: build docker image and build avail binary
        run: ENGINE=podman DISTRO=ubuntu-2310 ZIP=1 ./scripts/binaries/build.sh

      - uses: actions/upload-artifact@v2
        with:
          name: x86_64-ubuntu-2310-avail-node.tar.gz
          path: output/zips/x86_64-ubuntu-2310-avail-node.tar.gz

  x86_64_linux_fedora_38:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: '3.x'

      - name: install podman
        run: sudo apt-get update && sudo apt install podman -y
        
      - name: build docker image and build avail binary
        run: ENGINE=podman DISTRO=fedora-38 ZIP=1 ./scripts/binaries/build.sh

      - uses: actions/upload-artifact@v2
        with:
          name: x86_64-fedora-38-avail-node.tar.gz
          path: output/zips/x86_64-fedora-38-avail-node.tar.gz

  x86_64_linux_fedora_39:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: '3.x'

      - name: install podman
        run: sudo apt-get update && sudo apt install podman -y
        
      - name: build docker image and build avail binary
        run: ENGINE=podman DISTRO=fedora-39 ZIP=1 ./scripts/binaries/build.sh

      - uses: actions/upload-artifact@v2
        with:
          name: x86_64-fedora-39-avail-node.tar.gz
          path: output/zips/x86_64-fedora-39-avail-node.tar.gz

  x86_64_linux_debian_11:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: '3.x'

      - name: install podman
        run: sudo apt-get update && sudo apt install podman -y
        
      - name: build docker image and build avail binary
        run: ENGINE=podman DISTRO=debian-11 ZIP=1 ./scripts/binaries/build.sh

      - uses: actions/upload-artifact@v2
        with:
          name: x86_64-debian-11-avail-node.tar.gz
          path: output/zips/x86_64-debian-11-avail-node.tar.gz

  x86_64_linux_debian_12:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: '3.x'

      - name: install podman
        run: sudo apt-get update && sudo apt install podman -y
        
      - name: build docker image and build avail binary
        run: ENGINE=podman DISTRO=debian-12 ZIP=1 ./scripts/binaries/build.sh

      - uses: actions/upload-artifact@v2
        with:
          name: x86_64-debian-12-avail-node.tar.gz
          path: output/zips/x86_64-debian-12-avail-node.tar.gz

  x86_64_linux_arch:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: '3.x'

      - name: install podman
        run: sudo apt-get update && sudo apt install podman -y
        
      - name: build docker image and build avail binary
        run: ENGINE=podman DISTRO=arch ZIP=1 ./scripts/binaries/build.sh

      - uses: actions/upload-artifact@v2
        with:
          name: x86_64-arch-avail-node.tar.gz
          path: output/zips/x86_64-arch-avail-node.tar.gz

  arm64_linux_arch:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: '3.x'

      - name: install cargo deps and build avail
        shell: bash
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source "$HOME/.cargo/env" && rustup show 
          
          rustup target add aarch64-unknown-linux-gnu
          sudo apt-get update && sudo apt-get install -y musl-tools clang gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev libc6-dev-arm64-cross
          env  BINDGEN_EXTRA_CLANG_ARGS='--sysroot /usr/aarch64-linux-gnu' CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=/usr/bin/aarch64-linux-gnu-gcc cargo build --release --target=aarch64-unknown-linux-gnu -p avail-node
          pushd target/aarch64-unknown-linux-gnu/release/
          tar -czf arm64-ubuntu-2004-avail-node.tar.gz avail-node
          popd
      - uses: actions/upload-artifact@v2
        with:
          name: arm64-ubuntu-2004-avail-node.tar.gz
          path: target/aarch64-unknown-linux-gnu/release/arm64-ubuntu-2004-avail-node.tar.gz


  # compile all binaries from previous jobs into single release
  binary_publish:
    needs: [x86_64_linux_ubuntu_2004, x86_64_linux_ubuntu_2204, x86_64_linux_ubuntu_2310, x86_64_linux_fedora_38, x86_64_linux_fedora_39, x86_64_linux_debian_11, x86_64_linux_debian_12, x86_64_linux_arch, arm64_linux_arch, build_wasm]
    runs-on: ubuntu-latest
    steps:
      - name: Create Artifact Directory
        run: mkdir ./artifact

      - uses: actions/download-artifact@v3
        with:
          name: x86_64-ubuntu-2004-avail-node.tar.gz
          path: ./artifact

      - uses: actions/download-artifact@v3
        with:
          name: x86_64-ubuntu-2204-avail-node.tar.gz
          path: ./artifact

      - uses: actions/download-artifact@v3
        with:
          name: x86_64-ubuntu-2310-avail-node.tar.gz
          path: ./artifact

      - uses: actions/download-artifact@v3
        with:
          name: x86_64-fedora-39-avail-node.tar.gz
          path: ./artifact

      - uses: actions/download-artifact@v3
        with:
          name: x86_64-fedora-39-avail-node.tar.gz
          path: ./artifact

      - uses: actions/download-artifact@v3
        with:
          name: x86_64-debian-11-avail-node.tar.gz
          path: ./artifact

      - uses: actions/download-artifact@v3
        with:
          name: x86_64-debian-12-avail-node.tar.gz
          path: ./artifact

      - uses: actions/download-artifact@v3
        with:
          name: x86_64-arch-avail-node.tar.gz
          path: ./artifact

      - uses: actions/download-artifact@v3
        with:
          name: arm64-ubuntu-2004-avail-node.tar.gz
          path: ./artifact
        
      - uses: actions/download-artifact@v3
        with:
          name: avail-runtime-compressed-wasm
          path: ./artifact
        
      - name: Prepare
        id: prepare
        run: |
            TAG=${GITHUB_REF#refs/tags/}
            echo "tag_name=${TAG}" >> $GITHUB_OUTPUT

      - name: publish binaries
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./artifact/*
          release_name: ${{ steps.prepare.outputs.tag_name }}
          tag: ${{ steps.prepare.outputs.tag_name }}
          overwrite: true
          file_glob: true
