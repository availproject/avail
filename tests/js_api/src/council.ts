import '@polkadot/api-augment';
import '@polkadot/types-augment/registry';
import { Keyring } from '@polkadot/api';
import config from './config';
import { createApi, getNonce } from './api';

const keyring = new Keyring({ type: 'sr25519' });

async function main() {
  const api = await createApi();
  const sender = keyring.addFromUri(config.mnemonic);
  const nonce = await getNonce(api, sender.address);
  const increaseValidatorCount = api.tx.staking.increaseValidatorCount(10);
  const proposal = api.registry.createType('Call', {
    callIndex: increaseValidatorCount.callIndex,
    args: increaseValidatorCount.args,
  });
  const motion = {
    proposal: proposal,
    threshold: api.registry.createType('Compact<u32>', 5),
    length_bound: api.registry.createType('Compact<u32>', 36),
  };
  const options: Partial<any> = { app_id: 0, nonce };
  const unsub = await api.tx.council
    .propose(motion.threshold, motion.proposal, motion.length_bound)
    .signAndSend(sender, options, ({ events = [], status }) => {
      console.log('Transaction status:', status.type);

      if (status.isFinalized) {
        console.log('Completed at block hash', status.asFinalized.toHex());
        console.log(`Events: ${events.map((x) => `${x.event.section}_${x.event.method}`)}`);
        // Uncomment the below line ðŸ‘‡ to see the events details generated by the extrinsic
        // console.log('Events:', events);

        unsub();
        process.exit(0);
      }
    });
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});
