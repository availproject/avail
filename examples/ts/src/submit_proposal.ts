import { Keyring } from '@polkadot/api';
import config from './config';
import { createApi } from './api';

/**
 * Example of creating a council proposal.
 */
async function main() {
    // instantiate the api
    const api = await createApi();
    // construct the keyring after the api
    const keyring = new Keyring({ type: 'sr25519' });
    // add sender to our keyring with a hard-derivation path (empty phrase, so uses dev)
    const sender = keyring.addFromUri(config.mnemonic);
    // initiate the transaction to, for example, increase the validator count
    const increaseValidatorCount = api.tx.staking.increaseValidatorCount(10);
    // create the proposal from the transaction
    const proposal = api.registry.createType('Call', {
        callIndex: increaseValidatorCount.callIndex,
        args: increaseValidatorCount.args,
    });
    // create the motion from the proposal
    const motion = {
        proposal: proposal,
        threshold: api.registry.createType('Compact<u32>', 5),
        length_bound: api.registry.createType('Compact<u32>', 36),
    };
    // create the council proposal transaction
    const tx = api.tx.council.propose(motion.threshold, motion.proposal, motion.length_bound)
    // submit the transaction
    const unsub = await tx.signAndSend(sender, ({ events = [], status }) => {
        console.log('Transaction status:', status.type);

        if (status.isFinalized) {
            console.log('Completed at block hash', status.asFinalized.toHex());
            console.log(`Events: ${events.map((x) => `${x.event.section}_${x.event.method}`)}`);
            // Uncomment the below line ðŸ‘‡ to see the events details generated by the extrinsic
            // console.log('Events:', events);

            unsub();
            process.exit(0);
        }
    });
}

main()
    .catch((err) => {
        console.error(err);
        process.exit(1);
    })
